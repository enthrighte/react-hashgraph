{"version":3,"sources":["api/index.js","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["require","Client","PrivateKey","AccountCreateTransaction","Hbar","HashgraphApi","hashgraphAccountId","process","hashgraphPrivateKey","this","client","forTestnet","setOperator","createNewAccount","a","newAccountPrivateKey","generate","newAccountPublicKey","publicKey","setKey","setInitialBalance","fromTinybars","execute","newAccountTransactionResponse","getReceipt","newAccountId","accountId","console","log","Header","className","App","props","api","newAccount","onClick","generateNewAccount","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAEgHA,EAAQ,KAAhHC,E,EAAAA,OAAQC,E,EAAAA,WAAYC,E,EAAAA,yBAAmDC,E,EAAAA,KAEzEC,EAEF,aAAe,oBAEX,IAAMC,EAAqBC,aACrBC,EAAsBD,mGAS5BE,KAAKC,OAAST,EAAOU,aACrBF,KAAKC,OAAOE,YAAYN,EAAoBE,IAI7C,SAAeK,EAAtB,kC,4CAAO,WAAgCH,GAAhC,uBAAAI,EAAA,6DAEGC,EAAuBb,EAAWc,WAClCC,EAAsBF,EAAqBG,UAH9C,UAMyC,IAAIf,GAC3CgB,OAAOF,GACPG,kBAAkBhB,EAAKiB,aAAa,MACpCC,QAAQZ,GATV,cAMGa,EANH,gBAYsBA,EAA8BC,WAAWd,GAZ/D,cAYGc,EAZH,OAaGC,EAAeD,EAAWE,UAGhCC,QAAQC,IAAI,4DAA8DH,GAhBvE,kBAkBI,CACHA,eACAR,sBACAF,uBACAS,eAtBD,6C,wCCdQK,EANA,kBACX,qBAAKC,UAAU,SAAf,SACI,oDCwBOC,E,kDAvBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACNL,QAAQC,IAAI,iCACZ,IAAIK,EAAM,IAAI5B,EAHG,OAIjBsB,QAAQC,IAAIK,EAAIvB,QAJC,E,6FAOnB,8BAAAI,EAAA,6DACMmB,EAAM,IAAI5B,EADhB,SAEyBQ,EAAiBoB,EAAIvB,QAF9C,OAEMwB,EAFN,OAGEP,QAAQC,IAAIM,EAAWjB,qBAHzB,2C,0EAMA,WACE,OACE,sBAAKa,UAAU,MAAf,UACE,cAAC,EAAD,IACA,wBAAQK,QAAS1B,KAAK2B,mBAAtB,yC,GAlBUC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f85f153.chunk.js","sourcesContent":["// Hashgraph\n\nconst { Client, PrivateKey, AccountCreateTransaction, /*AccountBalanceQuery,*/ Hbar, /*TransferTransaction*/} = require(\"@hashgraph/sdk\");\n\nclass HashgraphApi {\n\n    constructor() {\n        // Grab the Account ID and Private Key from the environment variables\n        const hashgraphAccountId = process.env.REACT_APP_HASHGRAPH_ACCOUNT_ID;\n        const hashgraphPrivateKey = process.env.REACT_APP_HASHGRAPH_PRIVATE_KEY;\n    \n        // Check to make sure the Account ID and Private Key aren't NULL\n        if (hashgraphAccountId == null ||\n            hashgraphPrivateKey == null ) {\n                throw new Error(\"Environment variables hashgraphAccountId and hashgraphPrivateKey must be present.\");\n            }\n        \n        // Make the connection to the Hedera Hashgraph network\n        this.client = Client.forTestnet();\n        this.client.setOperator(hashgraphAccountId, hashgraphPrivateKey);\n    }\n}\n\nexport async function createNewAccount(client) {\n    // Create new keys\n    const newAccountPrivateKey = PrivateKey.generate();\n    const newAccountPublicKey = newAccountPrivateKey.publicKey;\n\n    // Create the new account with starting balance of 1,000 tinybars\n    const newAccountTransactionResponse = await new AccountCreateTransaction()\n        .setKey(newAccountPublicKey)\n        .setInitialBalance(Hbar.fromTinybars(1000))\n        .execute(client);\n\n    // Get the new account ID\n    const getReceipt = await newAccountTransactionResponse.getReceipt(client);\n    const newAccountId = getReceipt.accountId;\n\n    // Log the new account ID\n    console.log(\"New account successfully created. The new account ID is: \" + newAccountId);\n\n    return {\n        newAccountId,\n        newAccountPublicKey,\n        newAccountPrivateKey,\n        getReceipt\n    };\n}\n\n\nexport { HashgraphApi };","import React from \"react\";\nimport \"./Header.scss\";\n\nconst Header = () => (\n    <div className=\"header\">\n        <h2>React Hashgraph</h2>\n    </div>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { HashgraphApi, createNewAccount } from \"./api\";\nimport Header from './components/Header/Header';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log(\"Testing Hashgraph Connection:\");\n    let api = new HashgraphApi();\n    console.log(api.client)\n  }\n\n  async generateNewAccount() {\n    let api = new HashgraphApi();\n    let newAccount = await createNewAccount(api.client)\n    console.log(newAccount.newAccountPublicKey)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <button onClick={this.generateNewAccount}>Generate New Account</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}